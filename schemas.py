from pydantic import BaseModel
from typing import Optional


class UserCreate(BaseModel):
    email: str
    password: str

class UserSchema(BaseModel):
    id: int
    email: str
    is_active: bool
    class Config:
        from_attributes = True

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    email: Optional[str] = None



# 1. Base Schema: Contains all the common fields.
# This helps avoid code repetition.
class JobBase(BaseModel):
    title: str
    company: str
    location: str
    description: str
    apply_link: str
    mode: str  # e.g., 'Full-time', 'Part-time'
    salary: Optional[str] = None # e.g., "$80k - $100k" or "Competitive"
    job_type: str # e.g., 'Entry Level', 'Senior'

# 2. Create Schema: Used when creating a new job.
# It inherits all fields from JobBase.
class JobCreate(JobBase):
    pass

# 3. Read Schema: Used when returning a job from the database.
# It includes the 'id' which is generated by the database.
class JobSchema(JobBase):
    id: int

    class Config:
        # This tells Pydantic to read the data even if it's not a dict,
        # but an ORM model (like your Job object from the database).
        from_attributes = True